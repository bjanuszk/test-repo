- Hibernate & Sybase				                    		                |home (business CPU)
- JSF								                                                 |low priority
- Liquibase  							                                          |low priority
- Transactions in Spring                                      |home/work
- algorytmy sortujące: implementacja                          |home/work
- Spring Data                                                 |home/work
- Spring Hibernate support                                    |home/work
________________________________________________________________________________________________________________________
- Manifest file

Znajduje sie w META-INF dla archiwów JAR, WAR, EAR. Zawiera zbiór właściwości kluch wartość (klucz: wartość)
opisujących archiwum.

Przykladowe wpisy:
Manifest-Version: 1.0   standardowy, kiedy nie potrzeba wiecej wpisów
Main-Class: com.bj.MainInvoke   określa punkt startowy aplikacji, dla wykonywalnych jarów
Created-By: 1.2 (Sun Microsystems Inc.)
Class-Path: jar1-name jar2-name directory-name/jar3-name   dodaje zaleznosci do jar'a

dodatkowe np. dla spring boot'a:
Start-Class: com.nokia.sm.statistics.StatisticsApp        klasa startowa aplikacji
Spring-Boot-Version: 1.2.7.RELEASE                        wersja spring boot'a
Main-Class: org.springframework.boot.loader.JarLauncher   klasa startowa spring'a
________________________________________________________________________________________________________________________
- Get familiar with GitHub via command line			                |work
git push master
________________________________________________________________________________________________________________________
- JBehave							                                              |work
package springboot.hello.jbehave
________________________________________________________________________________________________________________________
- Refresh JUnit, Mockito, AssertJ	                          		|home/work
BDDMockito, CoreMatchers, Assert.assertThat
________________________________________________________________________________________________________________________
- Refresh Maven	(build phases, lifecycle)                     |home/work

Cykle projektu:
- clean - czysci katalog roboczy 'target'
- default (aka. build) - glowny cykl skladajacy sie z wielu faz w wyniku ktorych powstaje wynikowy plik (jar, war, ear)
- site - tworzy strone WWW z dokumentacja do projektu (zaleznosci, licencje, pluginy)

Fazy:
- validate
- process-resources: kopiuje pliki z src/main/resources do target/classes/
- compile - kompiluje .java do .class i wrzuca do target/classes, dodatkowo tworzy katalog maven-status z wynikem
  kompilacji (pliki na wejsciu i pliki na wyjsciu)
- process-test-resources: kopiuje pliki z src/test/resources do target/test-classes
- test-compile - kompiluje pliki .java z src/test/java i kopiuje do target/test-classes
- test - uruchamia testy
- package - pakuje aplikacje (tworzy jar, war, ear) i kopiuje do target, dodatkowo tworzy plik
  target/maven-archiver/pom.properties
- install - wrzuca paczke do lokalnego repozytorium (.m2)
- deploy - instaluje paczke w zdalnym repozytorium kiedy jest ustawione w pom.xml

Kolejne fazy wystepuja po sobie, np. deploy wykonuje wszystkie poprzednie fazy.

Cele (goals) - najmniejsza jednostka pracy w Maven. Kazda faza sklada sie z jednego lub wiecej goali np. clean sklada
 sie z pre-clean, clean, post-clean, ale w domyslnej konfiguracji tylko clean jest wykonywana.
________________________________________________________________________________________________________________________
- xml overview, schema, parsery, xslt                         |home/work

XML Extensible Markup Language

XSL - arkusze stylow dla XML, przykladem jest CSS dla HTML

XSLT - transformacja dokumentu XML na podstawie akrusza stylow XSL do innego dokumentu XML

.xsd pliki xml schema zawierajace 'interfejs' znacznikow: nazwa, atrybuty, orgraniczenia wartosci...

XML namespace - zbioru nazw znaczników
________________________________________________________________________________________________________________________
- TeamCity: simple project with unit test connected to Github	|home/work
________________________________________________________________________________________________________________________
- hashCode and equals in collections                          |home/work

EQUALS odpowiada za dodawanie elementow do zbioru (HashSet) oraz za sprawdzanie kluczy podczas dodawania do HashMap'y
 (contains dziala na metodzie equlas)
Element nie zostanie dodany do zbioru, jezeli zbior juz zawiera taki element ze equals zwraca true.

HASHCODE odpowiada za kolejnosc w kolekcjach typu Hash...
Elementy sa ustawiane zgodnie z rosnacymi wartosciami hashCode.
________________________________________________________________________________________________________________________
- inner classes                                              |home/work

Statyczne:
Statyczna klasa wewnetrzna jest tworzona konstrukcja: new Outer.InnerStatic(), nie trzeba tworzyc instacji klasy
zewnetrznej, aby stworzyc klase wewnetrzna.
Taka klasa ma dostep to prywatnych pol i metod klasy zewnetrzenej ale TYLKO STATYCZNYCH !!!

Niestatyczne:
Niestatyczna klasa wewnetrzna jest tworzona konstrukcja outer.new Inner(), wymagana jest instancja klasy zewnetrzenej
do utworzenia klasy wewnetrznej.
Taka klasa ma dostep do wszystkich pol i metod prywatnych klasy zewnetrznej, zarowno statycznych jak i niestatycznych.
________________________________________________________________________________________________________________________
- rekurencja                                                  |home/work

Przyklady w pakiecie recursion
________________________________________________________________________________________________________________________
- getResource - how it works?

Sa dwie glowne metody pobierania zasobów. Obie tyczą się zasobow z folderu resources, gdzie root (/) to folder
resources:

1) this.getClass().getResource(resourceName)

  a) this.getClass().getResource("path/to/resourse")
  Wyszukiwanie wzgledne w zaleznosci od pakietu w którym jest klasa (this). Nalezy w folderze resources odtworzyc
  scieżke: RESOURCES/package/name/path/to/resource

  b) this.getClass().getResource("/path/to/resourse")
  Wyszukiwanie bezwzględne: RESOURCES/path/to/resource

2) this.getClass().getClassLoader().getResource(name)

  a) this.getClass().getClassLoader().getResource("path/to/resourse")
  Wyszukiwanie bezwzględne: RESOURCES/path/to/resource

  b) this.getClass().getClassLoader().getResource("/path/to/resourse")
  Zwraca null'a. Tak nie mozna robic.

________________________________________________________________________________________________________________________
- poziomy izolacji w DB

Poziomy izolacji zwiazane są z równoległym działaniem wielu tranzakcji na tych samych danych w DB. W idealnym
przypadku można by wydzielić dwa poziomy izolacji:
- brak współbieżności - tranzakcje są szeregowane i wykonywane jedna po drugiej. Powodowałoby to problemy z wydajnością.
- maksymalna współbieżność - tranzakcje wykonywane są równolegle, mogą wzajemnie na siebie nachodzić i pracować na
wzajemnie zmodyfikowanych danych. Wydajnosć jest maksymalna, jednak integralność danych nie jest zachowana.

Anomalie, które mogą występować w przypadku współbieżności tranzakcji:
- dirty read - jedna tranzakcja odczytuje dane zmienione ale niezatwierdzone przez inną tranzakcję,
- nonrepeatable read - kolejne odczyty danych w jednej tranzacji dają różne wyniki, z powodu akcji typu UPDATE/DELETE
 wykonywanych przez inne tranzakcje
- phantom read - kolejne odczyty danych w jednej tranzacji dają różne wyniki, z powodu akcji typu INSERT
 wykonywanych przez inne tranzakcje

Aby dać większą elastyczność bazy danych wprowadzają następujące poziomy izolacji (zgodne z SQL92):
- read uncommited - najniższy poziom izolacji, tranzakcje działają równolegle na danych.
Problemy: dirty read, nonrepeatable read, phantom read
- read commited - tranzakcja odczytuje tylko zatwierdzone dane z DB
Problemy: nonrepeatable read, phantom read
- repeateable read - jedna tranzakcja nie może odczytywać i zapisywać danych, które są odczytywane badz modyfikowane
w innej tranzakcji
Problemy: phantom read
- serializable - tranzakcje wykonywane są szeregowo. Dane są spójne, wydajność spada.
------------------------------------------------------------------------------------------------------------------------
HIBERNATE:
Uzyta jest baza H2 w trybie serwera (Generic H2 (Server)). URL to jdbc:h2:tcp://localhost/~/hibernateTest
Podczas polaczenia do bazy h2 nalezy odpalic ja na porcie 8082 (user: sa, password: )
Plik z baza danych to home/bjanuszk/hibernateTest.mv.db
